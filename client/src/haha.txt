import React, { useContext } from 'react'
import { useEffect, useState, useRef } from 'react';
import sendbtn from './assets/send.png';
import chatimg from './assets/chat.png';
import attach from './assets/attach.png';
import { UserContext } from './UserContext';
import Start from './Start';
import _ from 'lodash';
import axios from 'axios';
import PeopleList from './People';
const Chat = () => {

    const [ws, setws] = useState(null);
    const [onlinePeople, setonlinePeople] = useState({});
    const [selectedUser, setselectedUser] = useState(null);
    const [newMessage, setnewMessage] = useState('');
    const [messages, setMessages] = useState([]);
    const { username, id, setid, setusername } = useContext(UserContext);
    const [People, setPeople] = useState({});
    const divUnderMEssage = useRef(null);

    //making connection to websocket
    useEffect(() => {
        connectTOWs();
    }, [selectedUser]);

    function connectTOWs() {
        const serverUrl = import.meta.env.VITE_WS_SERVER_URL;
        const ws = new WebSocket(serverUrl);
        setws(ws);

        ws.addEventListener('message', handlemessage);
        ws.addEventListener('close', () => {
            setTimeout(() => {
                console.log('trying to reconnect');
                connectTOWs();
            }, 1000);
        });
    }
    /* 
        function showPeople(peopleArray) {
            const people = {};
            peopleArray.forEach(({ userId, username }) => {
                people[userId] = username;
            });
            setonlinePeople(people);
        } */
        const [peopleWithLastMessage, setPeopleWithLastMessage] = useState({});

        function updatePeopleLastMessage(userId, timestamp) {
            setPeopleWithLastMessage(prevPeople => ({
                ...prevPeople,
                [userId]: timestamp,
            }));
        }

    useEffect(() => {
        axios.get('/people').then(res => {
            const PeopleArr = res.data.filter(p => p._id !== id)
            const People = {};
            PeopleArr.forEach(p => {
                People[p._id] = p;
            });
            setPeople(People);
        });

    }, [selectedUser, id, onlinePeople, People, messages, newMessage]);



    function handlemessage(e) {
        const messageData = JSON.parse(e.data);

        if (typeof messageData === 'object' && 'online' in messageData) {
            showPeople(messageData.online);
        } else if ('text' in messageData) {
            if (messageData.sender === selectedUser) {
                setMessages(prev => ([...prev, { ...messageData, isOur: false }]));
            }
        }
    }


    function sendMessage(e, file = null) {
        if (e) e.preventDefault();
        console.log('sending');
        ws.send(JSON.stringify({
            recipient: selectedUser,
            text: newMessage,
            file,
        }));

        setnewMessage("");
        setMessages(prev => ([...prev, {
            text: newMessage,
            sender: id,
            recipient: selectedUser,
            _id: Date.now(),
            isOur: true
        }]));
        if (file) {
            axios.get('/messages/' + selectedUser).then(res => {
                setMessages(res.data);
            });
        }


    }
    function sendfile(e) {
        const reader = new FileReader();
        reader.readAsDataURL(e.target.files[0]);
        reader.onload = () => {
            sendMessage(null, {
                name: e.target.files[0].name,
                data: reader.result,
            })
        }
    }

    //scroll to bottom
    useEffect(() => {

        const div = divUnderMEssage.current;
        if (div) {
            div.scrollIntoView({ behaviour: 'smooth' });
        }


    }, [messages]);

    //get messages
    useEffect(() => {
        if (selectedUser) {
            axios.get('/messages/' + selectedUser).then(res => {
                setMessages(res.data);
            });
        }
    }, [selectedUser]);



    const onlinePeopleExcludingUser = { ...onlinePeople };
    delete onlinePeopleExcludingUser[id];

    const messagesWithoutDupe = _.uniqBy(messages, '_id');


    //logout
    function logout() {
        axios.post('/logout').then(() => {
            setws(null);
            setid(null);
            setusername(null);
        })
    }


    const textStyle = { fontFamily: "'Yellowtail', cursive" };


    const [searchTerm, setSearchTerm] = useState('');
    const [searchResults, setSearchResults] = useState([]);

    const handleSearch = async (e) => {
        const term = e.target.value;
        console.log(term);

        setSearchTerm(term);

        try {
            const response = await axios.get(`/allpeople?searchTerm=${term}`);
            const { exists, users } = response.data;

            if (exists) {
                // Users exist in the database
                setSearchResults(users);
                console.log(users);
            } else {
                // No matching users found
                console.log("no user found");
                setSearchResults([]);

            }
        } catch (error) {
            console.error('Error fetching search results:', error);
        }
        // Function to handle selecting a user from search results

    };
    const handleSelectUser = (userId) => {
        setselectedUser(userId); // Set the selectedUser when a user is clicked

        // Update People list instantly
        axios.get('/people').then(res => {
            const PeopleArr = res.data.filter(p => p._id !== id)
            const updatedPeople = {};
            PeopleArr.forEach(p => {
                updatedPeople[p._id] = p;
            });

            // Merge the updated people list with the existing one using spread operator
            setPeople(prevPeople => ({ ...prevPeople, ...updatedPeople }));

        });

    };
    const [rerenderFlag, setRerenderFlag] = useState(false);

    // Function to trigger re-render every second
    useEffect(() => {
        const interval = setInterval(() => {
            // Update the flag to trigger re-render
            setRerenderFlag(prevFlag => !prevFlag);
        }, 1000);

        return () => clearInterval(interval); // Clean up the interval on component unmount
    }, []);

    return (

        <div className='flex h-screen'>
            <div className="bg-cyan-100 w-1/3 h-full flex flex-col p-5 mb-10 ">

                <div className="text-center bg-cyan-600 my-1 h-14 w-full p-3 rounded-lg text-white ">
                    <span style={textStyle} className=' mx-2 capitalize  text-cyan-100 text-4xl tracking-[.16em]'>
                        {username}
                    </span>
                </div>

                <div className="flex flex-row bg-cyan-400 h-16 rounded-lg text-white font-bold text-4xl   text-center items-center py-10 px-16 mb-0">
                    <div className="ml-16">Chats</div>
                    {<img className='h-12 mt-2 mx-2' src={chatimg} />}</div>


                {/*               ******************************************
 */}

                <div>
                    {/* search */}
                    <div >
                        <input
                            className='bg-white border-4 rounded-3xl font-mono h-12 border-cyan-900 w-full  p-3 pl-10 pr-10 m-2 text-cyan-900 font-bold'
                            type="text"
                            placeholder="Search by username..."
                            value={searchTerm}
                            onChange={(e) => handleSearch(e)}
                        />
                        {searchTerm.length > 0 && (
                            <ul className='bg-white rounded-3xl p-4 mb-1 w-full border-4 border-cyan-900'>
                                {searchResults.length > 0 ? (
                                    searchResults.map((user) => (
                                        <li className='border-b-2 border-cyan-900 font-mono font-bold text-cyan-900' key={user.id}
                                            onClick={() => handleSelectUser(user._id)}>
                                            {user.username}
                                        </li>
                                    ))
                                ) : (
                                    <li className='border-b-2 border-cyan-900 font-mono font-bold text-cyan-900'>No such User found</li>
                                )}
                            </ul>
                        )}

                    </div>
                </div>





                {/*                 ******************************************
 */}
                <div className="overflow-y-auto mm-5 h-full">
                    {/* Display users and handle selection */}
                    {Object.values(People).map((user) => (
                        <div
                            onClick={() => setselectedUser(user._id)} // Handle offline user selection
                            key={user._id}
                            className={`cursor-pointer flex flex-row over bg-cyan-200 my-2 mx-1.5 border-cyan-700 h-14 font-bold px-4 py-3 text-xl capitalize rounded-3xl ${user._id === selectedUser ? 'bg-cyan-500 text-cyan-100 border-b-4 pl-6 border-cyan-800' : 'text-cyan-800 border-l-8'}`}
                        >
                            <div className="bg-cyan-900 h-9 w-9 rounded-full text-white px-2 py-0.5 mr-5 text-m text-center">
                                {user.username[0]}
                            </div>
                            {user.username}
                        </div>
                    ))}
                </div>




                <div className="p-1 mt-4 text-center border-t-2 border-cyan-900 ">
                    <button onClick={logout}
                        className='bg-cyan-600  text-white font-bold p-2 rounded-lg'>Logout</button>
                </div>


            </div>
            <div className=" flex flex-col bg-cyan-300 w-2/3 overflow-hidden">
                {!selectedUser && <Start />}

                {!!selectedUser &&
                    <div className="flex flex-col h-full  overflow-y-auto " >
                        <div className="flex-grow overflow-auto">
                            {
                                messagesWithoutDupe.map((message, index) => (
                                    <div key={message._id} // Use _id as the key
                                        className={(message.sender == id ? ' text-right' : 'text-left')}>
                                        <div className={
                                            'p-2.5 m-1  rounded-2xl inline-block  ' + (message.sender === id ? 'bg-cyan-950 text-white ' : 'bg-cyan-200 text-cyan-950 font-medium')
                                        }
                                            key={index}>

                                            <div className="inline-block font-sans text-lg ">
                                                {message.text}
                                                {message.file && (
                                                    <div className="">

                                                        <div className="underline text-center italic cursor-pointer">
                                                            <a target='_blank' href={axios.defaults.baseURL + 'uploads/' + message.file}>
                                                                <img className='h-64 w-64 m-0 p-0 rounded-2xl '
                                                                    src={axios.defaults.baseURL + 'uploads/' + message.file}></img>
                                                                <div> {message.file}   </div>

                                                            </a>
                                                        </div>
                                                    </div>
                                                )}


                                            </div>
                                        </div>
                                    </div>
                                ))

                            }
                            <div ref={divUnderMEssage}></div>


                        </div>

                        <form onSubmit={sendMessage} className="flex gap-2 mx-2">
                            <input
                                type="text"
                                placeholder="Type your message here"
                                value={newMessage}
                                onChange={(e) => setnewMessage(e.target.value)}
                                name=""
                                id=""
                                className="p-2 m-3 border-2 flex-grow rounded-lg outline-none border-cyan-900"
                            />
                            <label className="bg-cyan-500 cursor-pointer p-2 px-1 mx-0 my-3 text-white rounded-lg">
                                <input type='file' className='hidden' onChange={sendfile} />
                                <img className="h-7" src={attach} alt="Send" />
                            </label>
                            <button type='submit' className="bg-cyan-600 p-2 px-3 m-3 text-white rounded-lg">
                                <img className="h-7" src={sendbtn} alt="Send" />
                            </button>
                        </form>
                    </div>

                }

            </div>
        </div >
    )
}

export default Chat
